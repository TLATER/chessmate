var EventEmitter = require('events').EventEmitter;
var communicationServer = require('Comms');
var gameEngine = require('Engine');
var bus = require('systemBus');

function chessmate() {
    //Call the EventEmitter's initializing on this object
    EventEmitter.call(this);

    this.engine;
    this.bus = new bus();
    this.comms = new communicationServer(this.bus);
    var that = this;

    this.bus.on('moved', function(data) {
        console.log('Does this even trigger?');
        if (data !== 'invalid')
            var move = { move: JSON.stringify(data) };
        that.emit('sendMove', move);
    });
}

//Inherit the EventEmitter methods (on, emit, ...)
chessmate.prototype = Object.create(EventEmitter.prototype);

chessmate.prototype.receive = function(message) {
    return this.comms.receive(message);
};

chessmate.prototype.isCommand = function(message) {
    return this.comms.test(message);
};

chessmate.prototype.createGame = function() {
    this.engine = new gameEngine(this.bus);
    return this.engine.board.getPiecemap();
};

chessmate.prototype.display = function() {
    return this.engine.board.getPiecemap();
};

module.exports = chessmate;