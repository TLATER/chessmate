//uiCommunication index
var Client = require('client');
var Bus = require('../systemBus');

// Defining an object (which gets created once). Has an empty array
// Has instance methods to access clients
function uiCommunication() {
    var clients = [];

    this.getClients = function() {
        return clients;
    };

    // Adds a client to the clients array with a given a response (address)
    this.addClient = function(client) {
        clients.push(client);
    };

    // engineComms will change this to JSON
    Bus.on('receivedMove', function(request) {
        Bus.emit('desiredMove', function(request) {
        });
    });

    Bus.on('sendMove', function(move) {
        this.broadcast(move);
    });
}


// Getting from client and sending to server
uiCommunication.prototype.registerClient = function(response) {
    var newClient = new Client(response);
    this.addClient(newClient);

    response.write('id:' + Date.now() + '\n\n');
    response.write('data:' + JSON.stringify(this.getClients()) + '\n\n');
};


// Sending from server to Client UI
// Defining public method broadcoast. Public because 'prototype'. For each
// client in clients array, send a response.
uiCommunication.prototype.broadcast = function(data) {
    this.getClients().forEach(function(client) {
        client.sendResponse(data);
    });
};


var comms = new uiCommunication();

module.exports = comms;