/**
 * Creates a square, used for proper algebraic notation in logs and to hold
 * a chess piece. Returns null if the given file/rank is invalid.
 *
 * @args:
 *       file - contains the letter representing the column
 *       rank - contains the number representing the row
 *
 * @public:
 *       toString - returns the string representation in algebraic notation
 *                  e.g. 'A1'
 *       getPieceName - returns the piece name
 *       getAttacked - returns true if the square is currently 'under attack',
 *                     false otherwise
 *
 * @privileged:
 *       getFile  - returns file
 *       getRank  - returns rank
 *       getPiece - returns piece
 *       setPiece - sets piece
 */

//Constructor
var Square = function(rank, file, piece, isAttacked) {
    //One number between 1-8
    var re = /^[1-8]$/;
    //If any input is not just one number, return null
    if (!re.test(rank) || !re.test(file))
        return null;

    //Replace the int value in file with a letter
    file = replaceInt(file);

    // Contains whether or not the square is currently under attack
    if (isAttacked === undefined)
        isAttacked = false;

    this.getAttacked= function() {
        return isAttacked;
    };

    //Return the file variable
    this.getFile = function() {
        return file;
    };

    //Return the rank variable
    this.getRank = function() {
        return rank;
    };

    //Return the piece variable
    this.getPiece = function() {
        return piece;
    };

    //Set the piece variable
    this.setPiece = function(newPiece) {
        piece = newPiece;
    };
};

//Returns piece toString
Square.prototype.getPieceName = function() {
    return this.getPiece().toString();
};

Square.prototype.getPieceColor = function() {
    return this.getPiece().getColorString();
};

//toString
Square.prototype.toString = function() {
    return this.getFile() + this.getRank();
};

// Returns if true if the cell is currently attacked
Square.prototype.getAttacked = function() {
    return this.getAttacked();
};

// Returns a reference to the piece stored in this square
Square.prototype.piece = function() {
    return this.getPiece();
};

//Helper method to change file number into letter
function replaceInt(int) {
    var map = {
        '1': 'a',
        '2': 'b',
        '3': 'c',
        '4': 'd',
        '5': 'e',
        '6': 'f',
        '7': 'g',
        '8': 'h'
    };

    int = int.toString();
    return int.replace(/^[1-8]$/, function(char) { return map[char] });
}

module.exports = Square;