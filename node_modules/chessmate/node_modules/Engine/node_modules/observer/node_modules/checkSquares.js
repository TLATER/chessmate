
function checkSquares(square, moveFile, moveRank,observer) {
  var name = square.getPieceName();

  switch(name){
    case 'P': return pawnSquares(square,moveFile,moveRank,observer);
    case 'S': return knightSquares(square,moveFile,moveRank,observer);
    case 'B': return bishopSquares(square,moveFile,moveRank,observer);
    case 'R': return rookSquares(square,moveFile,moveRank,observer);
    case 'Q': return queenSquares(square,moveFile,moveRank,observer);
    case 'K': return queenSquares(square,moveFile,moveRank,observer);
    default : return false;
  }

}

function pawnSquares(square,moveFile,moveRank,observer){
    var rank = square.rank();

    console.log(observer.board.getSquare(moveFile, moveRank).getPieceName());

    if (square.getPiece().getColor() === 1) {
        if (observer.board.getSquare(moveFile, rank + 1).getPieceName() !== ' ')
            return true;
    } else {
        if (observer.board.getSquare(moveFile, rank - 1).getPieceName() !== ' ')
            return true;
    }

    if (square.getPiece().isFirstMove())
        if( observer.board.getSquare(moveFile, moveRank).getPieceName() !== ' ')
            return true;

    return false;
}

function knightSquares(square,moveFile,moveRank,observer){
    if(observer.board.getSquare(moveFile,moveRank).getPiece().getColor()
        != square.getPiece().getColor())
        return false;
    return true;
}

function bishopSquares(square,moveFile,moveRank,observer){
    var file = square.file();
    var rank = square.rank();

    if(moveFile > file && moveRank > rank)
        for(var i =file , j = rank; i < moveFile, j < rank; i++, j++)
            if(observer.board.getSquare(i,j).getPiece() != ' ' )
                return false;

    if(moveFile < file && moveRank < rank)
        for(var i =file , j = rank; i > moveFile, j > rank; i--, j--)
            if(observer.board.getSquare(i,j).getPiece() != ' ' )
                return false;

    if(moveFile > file && moveRank < rank)
        for(var i =file , j = rank; i < moveFile, j > rank; i++, j--)
            if(observer.board.getSquare(i,j).getPiece() != ' ' )
                return false;

    if(moveFile < file && moveRank > rank)
        for(var i =file , j = rank; i > moveFile, j < rank; i--, j++)
            if(observer.board.getSquare(i,j).getPiece() != ' ' )
                return false;

    if(observer.board.getSquare(moveFile,moveRank).getPiece().getColor()
        == square.getPiece().getColor())
        return false();
    return true;

}

function rookSquares(square,moveFile,moveRank,observer){
    var file = square.getFile();
    var rank = square.getRank();

    if(file == moveFile){
        if(rank>moveRank)
            for(var i = moveRank; i < rank; i++)
                if(observer.board.getSquare(moveFile,i).getPiece() != ' ')
                    return false;
        else
            for( i = rank; i< moveRank; i++)
                if(observer.board.getSquare(moveFile,i).getPiece() != ' ')
                    return false;
    }

    if(rank == moveRank){
        if(file>moveFile)
            for( i = moveFile; i < file; i++)
                if(observer.board.getSquare(i.moveRank).getPiece() != ' ')
                    return false;
        else
            for( i = file; i< moveFile; i++)
                if(observer.board.getSquare(i,moveRank).getPiece() != ' ')
                    return false;
    }
    if(observer.board.getSquare(moveFile,moveRank).getPiece().getColor()
        == square.getPiece().getColor())
        return false();

    return true;

}

function queenSquares(square,moveFile,moveRank,observer){

    var file = square.getFile();
    var rank = square.getRank();

    if(moveFile > file && moveRank > rank)
        for(var i =file , j = rank; i < moveFile, j < rank; i++, j++)
            if(observer.board.getSquare(i,j).getPiece() != ' ' )
                return false;

    if(moveFile < file && moveRank < rank)
        for(var i =file , j = rank; i > moveFile, j > rank; i--, j--)
            if(observer.board.getSquare(i,j).getPiece() != ' ' )
                return false;

    if(moveFile > file && moveRank < rank)
        for(var i =file , j = rank; i < moveFile, j > rank; i++, j--)
            if(observer.board.getSquare(i,j).getPiece() != ' ' )
                return false;

    if(moveFile < file && moveRank > rank)
        for(var i =file , j = rank; i > moveFile, j < rank; i--, j++)
            if(observer.board.getSquare(i,j).getPiece() != ' ' )
                return false;

     if(file == moveFile){
        if(rank>moveRank)
            for(var i = moveRank; i < rank; i++)
                if(observer.board.getSquare(moveFile,i).getPiece() != ' ')
                    return false;
        else
            for( i = rank; i< moveRank; i++)
                if(observer.board.getSquare(moveFile,i).getPiece() != ' ')
                    return false;
    }

    if(rank == moveRank){
        if(file>moveFile)
            for( i = moveFile; i < file; i++)
                if(observer.board.getSquare(i.moveRank).getPiece() != ' ')
                    return false;
        else
            for( i = file; i< moveFile; i++)
                if(observer.board.getSquare(i,moveRank).getPiece() != ' ')
                    return false;
    }
    if(observer.board.getSquare(moveFile,moveRank).getPiece().getColor()
        == square.getPiece().getColor())
        return false();

    return true;
}

module.exports = checkSquares;