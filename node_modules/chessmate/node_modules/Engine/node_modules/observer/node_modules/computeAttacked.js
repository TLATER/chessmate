function computeAttacked(observer) {
    for(var i = 1; i<=8; i++)
      for(var j = 1; j<=8; j++){
        var square = observer.board.getSquare(i,j);
        var name = square.getPieceName();
     
        switch(name){
            case 'P': computePawn(square,observer);
                      break;
            case 'S': computeKnight(square,observer);
                      break;
            case 'B': computeBishop(square,observer);
                      break;
            case 'Q': computeBishop(square,observer);
                      computeRook(square,observer);
                      break;
            case 'R': computeRook(square,observer);
                      break;
            case 'K': computeKing(square,observer);
                      break;
            default: break;          
        }
          
      }
}

function computePawn(square,observer){
  var file = conv(square.file());
  var rank = square.rank();
  
  if(square.getPiece().getColor == 1 
        && file+1 > 0 && file+1 < 9 && rank+1 > 0 && rank+1 < 9){
    observer.board.getSquare(file+1,rank+1).setAttacked(true);    
    observer.board.getSquare(file+1,rank+1).addWhiteAggressors();
    }
    
  if( square.getPiece().getColor == 0 
        && file-1 > 0 && file-1 < 9 && rank-1 > 0 && rank-1 < 9){
    observer.board.getSquare(file-1,rank-1).setAttacked(true);    
    observer.board.getSquare(file-1,rank-1).addWhiteAggressors();
  }
    
}

function computeKnight(square,observer){
    
    var file = conv(square.file());
    var rank = square.rank();
    
    if(file+2 < 9 && file+2 > 0 && rank+1 < 9 && rank+1 > 0 ){
        observer.board.getSquare(file+2,rank+1).setAttacked(true);
        if(square.getPiece().getColor == 1)
            observer.board.getSquare(file+2,rank+1).addWhiteAggressors();
        else
            observer.board.getSquare(file+2,rank+1).addBlackAggressors();
    }
    
    if(file+1 < 9 && file+1 > 0 && rank+2 < 9 && rank+2 > 0 ){
        observer.board.getSquare(file+1,rank+2).setAttacked(true);
        if(square.getPiece().getColor == 1)
            observer.board.getSquare(file+1,rank+2).addWhiteAggressors();
        else
            observer.board.getSquare(file+1,rank+2).addBlackAggressors();
    }
    
    if(file-1 < 9 && file-1 > 0 && rank+2 < 9 && rank+2 > 0 ){
        observer.board.getSquare(file-1,rank+2).setAttacked(true);
        if(square.getPiece().getColor == 1)
            observer.board.getSquare(file-1,rank+2).addWhiteAggressors();
        else
            observer.board.getSquare(file-1,rank+2).addBlackAggressors();
    }
    
    if(file-2 < 9 && file-2 > 0 && rank+1 < 9 && rank+1 > 0 ){
        observer.board.getSquare(file-2,rank+1).setAttacked(true);
        if(square.getPiece().getColor == 1)
            observer.board.getSquare(file-2,rank+1).addWhiteAggressors();
        else
            observer.board.getSquare(file-2,rank+1).addBlackAggressors();
    }
    
    if(file-2 < 9 && file-2 > 0 && rank-1 < 9 && rank-1 > 0 ){
        observer.board.getSquare(file-2,rank-1).setAttacked(true);
        if(square.getPiece().getColor == 1)
            observer.board.getSquare(file-2,rank-1).addWhiteAggressors();
        else
            observer.board.getSquare(file-2,rank-1).addBlackAggressors();
    }
    
    if(file-1 < 9 && file-1 > 0 && rank-2 < 9 && rank-2 > 0 ){
        observer.board.getSquare(file-1,rank-2).setAttacked(true);
        if(square.getPiece().getColor == 1)
            observer.board.getSquare(file-1,rank-2).addWhiteAggressors();
        else
            observer.board.getSquare(file-1,rank-2).addBlackAggressors();
    }
    
    if(file+1 < 9 && file+1 > 0 && rank-2 < 9 && rank-2 > 0 ){
        observer.board.getSquare(file+1,rank-2).setAttacked(true);
        if(square.getPiece().getColor == 1)
            observer.board.getSquare(file+1,rank-2).addWhiteAggressors();
        else
            observer.board.getSquare(file+1,rank-2).addBlackAggressors();
    }
    
    if(file+2 < 9 && file+2 > 0 && rank-1 < 9 && rank-1 > 0 ){
        observer.board.getSquare(file+2,rank-1).setAttacked(true);
        if(square.getPiece().getColor == 1)
            observer.board.getSquare(file+2,rank-1).addWhiteAggressors();
        else
            observer.board.getSquare(file=2,rank-1).addBlackAggressors();
    }
        
    
}

function computeBishop(square,observer){
    var file = conv(square.file())+1;
    var rank = square.rank()+1;
    
    while(file < 9 && file > 0 && rank < 9 && rank > 0){

    
        observer.board.getSquare(file,rank).setAttacked(true);
        if(observer.board.getSquare(file,rank).getPiece().getColor() == 1)
            observer.board.getSquare(file,rank).addWhiteAggressors();
        else
            observer.board.getSquare(file,rank).addBlackAggressors();
       
        if(observer.board.getSquare(file,rank).getPiece() != ' ')
            break;    
        ++file; ++rank;
        
    }
    
    file = conv(square.file())-1;
    rank = square.rank()-1;
    
    while(file < 9 && file > 0 && rank < 9 && rank > 0){


        observer.board.getSquare(file,rank).setAttacked(true);
        if(observer.board.getSquare(file,rank).getPiece().getColor() == 1)
            observer.board.getSquare(file,rank).addWhiteAggressors();
        else
            observer.board.getSquare(file,rank).addBlackAggressors();
           
        if(observer.board.getSquare(file,rank).getPiece() != ' ')
            break;    
        --file; --rank;
       
    }
    
    file = conv(square.file())+1;
    rank = square.rank()-1;
    
    while(file < 9 && file > 0 && rank < 9 && rank > 0){

  
        observer.board.getSquare(file,rank).setAttacked(true);
        if(observer.board.getSquare(file,rank).getPiece().getColor() == 1)
            observer.board.getSquare(file,rank).addWhiteAggressors();
        else
            observer.board.getSquare(file,rank).addBlackAggressors();
            
        if(observer.board.getSquare(file,rank).getPiece() != ' ')
            break;    
        ++file; --rank;
        
    }
    
    file = conv(square.file())-1;
    rank = square.rank()+1;
    
    while(file < 9 && file > 0 && rank < 9 && rank > 0){

        
        observer.board.getSquare(file,rank).setAttacked(true);
        if(observer.board.getSquare(file,rank).getPiece().getColor() == 1)
            observer.board.getSquare(file,rank).addWhiteAggressors();
        else
            observer.board.getSquare(file,rank).addBlackAggressors();
     
        if(observer.board.getSquare(file,rank).getPiece() != ' ')
            break;    
        --file; ++rank;
        
    }
    
}

function computeRook(square,observer){
    var file = conv(square.file())+1;
    var rank = square.rank();
    
    
    while(file < 9 && file > 0 ){
        
        observer.board.getSquare(file,rank).setAttacked(true);
        if(observer.board.getSquare(file,rank).getPiece().getColor() == 1)
            observer.board.getSquare(file,rank).addWhiteAggressors();
        else
            observer.board.getSquare(file,rank).addBlackAggressors();
     
        if(observer.board.getSquare(file,rank).getPiece() != ' ')
            break;    
        ++file;
    }
    
    file = conv(square.file())-1;
    rank = square.rank();
    
    
    while(file < 9 && file > 0 ){
        observer.board.getSquare(file,rank).setAttacked(true);
        if(observer.board.getSquare(file,rank).getPiece().getColor() == 1)
            observer.board.getSquare(file,rank).addWhiteAggressors();
        else
            observer.board.getSquare(file,rank).addBlackAggressors();
     
        if(observer.board.getSquare(file,rank).getPiece() != ' ')
            break;    
        --file;
        
    }
    
    file = conv(square.file());
    rank = square.rank+1;
    
    while(rank < 9 && rank > 0 ){

     
        observer.board.getSquare(file,rank).setAttacked(true);
        if(observer.board.getSquare(file,rank).getPiece().getColor() == 1)
            observer.board.getSquare(file,rank).addWhiteAggressors();
        else
            observer.board.getSquare(file,rank).addBlackAggressors();

        if(observer.board.getSquare(file,rank).getPiece() != ' ')
            break;
        ++rank;
      
    }
    
    file = conv(square.file());
    rank = square.rank-1;
    
    while(rank < 9 && rank > 0 ){

        observer.board.getSquare(file,rank).setAttacked(true);
        if(observer.board.getSquare(file,rank).getPiece().getColor() == 1)
            observer.board.getSquare(file,rank).addWhiteAggressors();
        else
            observer.board.getSquare(file,rank).addBlackAggressors();
    
        if(observer.board.getSquare(file,rank).getPiece() != ' ')
            break;
        --rank;
       
    }
    
}

function computeKing(square,observer){
    var file = conv(square.file());
    var rank = square.rank();
    
    for(var i = -1; i<=1; i++)
      for(var j = -1; j<=1; j++)
        if(i!= 0 && j!= 0){
            if(file+i > 0 && file + i < 9 && rank+j > 0 && rank+j < 9){
                
              observer.board.getSquare(file+i,rank+j).setAttacked(true);
              if(observer.board.getSquare(file,rank).getPiece().getColor() == 1)
                 observer.board.getSquare(file+i,rank+j).addWhiteAggressors();
              else
                observer.board.getSquare(file+i,rank+j).addBlackAggressors();
            }
        }
}

function conv(no){
    switch(no) {
        case 'a': return 1;
        case 'b': return 2;
        case 'c': return 3;
        case 'd': return 4;
        case 'e': return 5;
        case 'f': return 6;
        case 'g': return 7;
        case 'h': return 8;
        case  1 : return 'a';
        case  2 : return 'b';
        case  3 : return 'c';
        case  4 : return 'd';
        case  5 : return 'e';
        case  6 : return 'f';
        case  7 : return 'g';
        case  8 : return 'h';
        default : return 0;
    }
}

module.exports = computeAttacked;