var king = require('../../pieces');
var rook = require('../../pieces');
var checkMate = require('./checkMate');
var checkSquares = require('./checkSquares');
var computeAttacked = require('./computeAttacked');
var staleMate = require('./staleMate');

function isLegal(square, playerColor, moveFile, moveRank, observer) {
    playerColor = parseInt(playerColor, 10);


    if( square.getPiece().getColor() !== playerColor)
        return false;

    // name of the piece
    var name = square.getPieceName();
    var color = square.getPiece().getColor();

    //the boolean for moving(true/false)sssss
    var bool;

    for(var i =1; i<= 8; i++)
      for(var j=1; j<= 8; j++)
         observer.board.getSquare(i,j).resetAggressors();

    computeAttacked(observer);

    //go method given by the piece we have
    switch(name) {
        case 'P':  bool = movePawn(square ,moveFile, moveRank,observer,color);
                   break;
        case 'S':  bool = moveKnight(square,moveFile, moveRank,observer,color);
                   break;
        case 'B':  bool = moveBishop(square,moveFile,moveRank,observer,color);
                   break;
        case 'R':  bool = moveRook(square,moveFile,moveRank,observer,color);
                   break;
        case 'Q':  bool = moveQueen(square,moveFile,moveRank,observer,color);
                   break;
        case 'K':  bool = moveKing(square,moveFile,moveRank,observer,color);
                   break;
    }


    var squareKingW = observer.pieces.getKingWhite().square();
    var squareKingB = observer.pieces.getKingBlack().square();


    //console.log(bool);

    if(playerColor == 1)
        if(checkMate(playerColor,observer) && squareKingB.isAttacked())
            return "CheckMate";
    else 
        if(checkMate(playerColor,observer) && squareKingW.isAttacked())
            return "CheckMate";

    if(staleMate(playerColor,observer) && checkMate(playerColor,observer))
        return "StaleMate";
    if(bool
       && (squareKingW.isAttacked() && squareKingW.getBlackAggressors() > 0)
       && (squareKingB.isAttacked() && squareKingB.getWhiteAggressors() > 0))
        return false;
        
    return bool;
}

function movePawn(square,moveFile, moveRank, observer,color) {

     // check the squares

    if (color === 1) {

        if (square.getPiece().isFirstMove()
            && ( moveRank - square.rank() ) === 2
            && moveFile - conv(square.file()) === 0) {

            if(checkSquares(square,moveFile,moveRank,observer))
                return false;
            if(square.getPiece().isFirstMove())
                square.getPiece().moved();
            observer.board.move(square, moveFile, moveRank);
            return true;
        }

        if (moveRank - square.rank() === 1
            && moveFile - conv(square.file()) === 0) {

            if(checkSquares(square, moveFile, moveRank, observer))
                return false;
            if(square.getPiece().isFirstMove())
                square.getPiece().moved();
            observer.board.move(square, moveFile, moveRank);
            return true;
        }

        if (moveRank-square.rank() === 1
            && Math.abs(moveFile - conv(square.file())) === 1
            && observer.board.getSquare(moveFile,moveRank).getPiece().getColor()
                                                                      === 0) {
            if(square.getPiece().isFirstMove())
                square.getPiece().moved();
            observer.board.move(square, moveFile, moveRank);
            return true;
        }

    } else {
        if (square.getPiece().isFirstMove()
            && ( moveRank - square.rank()) === -2
            && moveFile - conv(square.file()) === 0) {

            if(checkSquares(square,moveFile,moveRank,observer))
                return false;
            if(square.getPiece().isFirstMove())
                square.getPiece().moved();
            observer.board.move(square, moveFile, moveRank);
            return true;
        }



        if (moveRank-square.rank() === -1
            && moveFile - conv(square.file()) === 0) {
            if(checkSquares(square,moveFile,moveRank,observer))
                return false;
            if(square.getPiece().isFirstMove())
                square.getPiece().moved();
            observer.board.move(square, moveFile, moveRank);
            return true;
        }

        if (moveRank-square.rank() === -1
            && Math.abs(moveFile - conv(square.file())) === 1
            && observer.board.getSquare(moveFile,moveRank).getPiece().getColor()
                                                                      === 1)  {
            if(square.getPiece().isFirstMove())
                square.getPiece().moved();
            observer.board.move(square, moveFile, moveRank);
            return true;
        }

    }

    return false;
}

function moveKnight(square,moveFile, moveRank,observer,color){




    if ((Math.abs(moveFile - conv(square.file()))  == 1
        && Math.abs(moveRank - square.rank()) == 2)
        || (Math.abs(moveFile - conv(square.file()))  == 2
        && Math.abs(moveRank - square.rank()) == 1)) {
            
        
       if(checkSquares(square,moveFile,moveRank, observer))
            return false;        
       observer.board.move(square, moveFile,moveRank);
       return true;}
    return false;
}

function moveBishop(square,moveFile, moveRank,observer,color){

    

    if(Math.abs(moveFile-conv(square.file()))
        == Math.abs(moveRank-square.rank())){
            
        if(!checkSquares(square,moveFile,moveRank,observer))
            return false;    
        observer.board.move(square, moveFile,moveRank);
        return true; }
    return false;
}

function moveRook(square,moveFile, moveRank,observer){

    if(moveFile == conv(square.file()) || moveRank == square.rank())
    {
        
        if(!checkSquares(square,moveFile,moveRank,observer))
            return false;
        
        if(!square.getPiece().isMoved())
            square.getPiece().moved();
        observer.board.move(square, moveFile,moveRank);
        return true;}

    return false;
}

function moveQueen(square, moveFile, moveRank,observer,color){


    if(!checkSquares(square,moveFile,moveRank,observer))
        return false;

    if((moveFile == conv(square.file()) || moveRank == square.rank())
        || (Math.abs(moveFile-conv(square.file()))
        == Math.abs(moveRank-square.rank()))){

        observer.board.move(square, moveFile,moveRank);
        return true; }
    return false;

}

function moveKing(square,moveFile,moveRank,observer,color) {

    if(square.getPiece().getColor() == 1){

        if(moveFile == 7 && moveRank == 1 && square.getPiece().isMoved()
            && observer.board.getSquare(8,1).getPiece().isMoved()
            && checkSquares(observer.board.getSquare(8,1), 6,1,observer)
            && observer.board.getSquare(7,1).isAttacked()
            && observer.board.getSquare(6,1).isAttacked()) {


            square.getPiece().moved();
            observer.board.move(observer.board.getSquare(5,1), 7, 1 );
            observer.board.move(observer.board.getSquare(8,1), 6, 1 );
            observer.bus.emit('moved', ["H1", "F1"]);
            observer.board.getSquare(6,1).getPiece().moved();
            return true; }

        else
        if(moveFile == 3 && moveRank == 1 && square.getPiece().isMoved()
            && observer.board.getSquare(1,1).getPiece().isMoved()
            && checkSquares(observer.board.getSquare(1,1),4 ,1,observer)
            && observer.board.getSquare(2,1).isAttacked()
            && observer.board.getSquare(3,1).isAttacked()
            && observer.board.getSquare(4,1).isAttacked()){

            square.getPiece().moved();
            observer.board.move(observer.board.getSquare(5,1),3 ,1);
            observer.board.move(observer.board.getSquare(1,1),4, 1);
            observer.bus.emit('moved', ["A1", "D1"]);
            observer.board.getSquare(4,1).getPiece().moved();
            return true; }

    }
    else
    {
        if(moveFile == 8 && moveRank == 8 && square.getPiece().isMoved()
            && observer.board.getSquare(8,8).getPiece().isMoved()
            && checkSquares(observer.board.getSquare(8,8),5,8,observer)
            && observer.board.getSquare(7,8).isAttacked()
            && observer.board.getSquare(6,8).isAttacked()){

            square.getPiece().moved();
            observer.board.move(observer.board.getSquare(5,8), 7, 8 );
            observer.board.move(observer.board.getSquare(8,8), 6, 8 );
            observer.bus.emit('moved', ["H8", "F8"]);
            observer.board.getSquare(6,8).getPiece().moved();
            return true; }

        else
        if(moveFile == 3 && moveRank == 8 && square.getPiece().isMove()
            && observer.board.getSquare(1,8).getPiece().isMoved()
            && checkSquares(observer.board.getSquare(1,8),5,8,observer)
            && observer.board.getSquare(2,8).isAttacked()
            && observer.board.getSquare(3,8).isAttacked()
            && observer.board.getSquare(4,8).isAttacked()){

            square.getPiece().moved();
            observer.board.move(observer.board.getSquare(5,8),3 ,8);
            observer.board.move(observer.board.getSquare(1,8),4, 8);
            observer.bus.emit('moved', ["A8", "D8"]);
            square.getPiece().moved();
            observer.board.getSquare(5,8).getPiece().moved();
            return true; }

    }



    if(Math.abs(moveFile - conv(square.file())) <= 1
        && Math.abs(moveRank - square.rank()) <=1 ){

        if(square.getPiece().getColor == color && square.isAttacked())
            return false;

        square.getPiece().moved();
        observer.board.move(square,moveFile,moveRank);
        return true;
    }
    return false;
}

function conv(file) {
    switch(file) {
        case 'a': return 1;
        case 'b': return 2;
        case 'c': return 3;
        case 'd': return 4;
        case 'e': return 5;
        case 'f': return 6;
        case 'g': return 7;
        case 'h': return 8;
        case  1 : return 'a';
        case  2 : return 'b';
        case  3 : return 'c';
        case  4 : return 'd';
        case  5 : return 'e';
        case  6 : return 'f';
        case  7 : return 'g';
        case  8 : return 'h';
        default : return 0;
    }
}

module.exports = isLegal;