var Board = require('../../board');
var king = require('../../pieces');
var rook = require('../../pieces');
var checkMate = require('./checkMate');
var checkSquares = require('./checkSquares');

function isLegal(square, moveFile, moveRank) {
    // name of the piece
    var name = square.getPieceName();
    var color = square.getPiece().getColor();

    //the boolean for moving(true/false)sssss
    var bool;

    //go method given by the piece we have
    switch(name) {
        case 'P':  bool =  movePawn(square ,moveFile, moveRank);
                   break;
        case 'S':  bool = moveKnight(square,moveFile, moveRank);
                   break;
        case 'B':  bool = moveBishop(square,moveFile,moveRank);
                   break;
        case 'R':  bool = moveRook(square,moveFile,moveRank);
                   break;
        case 'Q':  bool = moveQueen(square,moveFile,moveRank);
                   break;
        default : return false;
    }

    // if(bool == true && king.isAttacked)
    // {
        // king.isChecked();
    // }

//    if(checkMate(king,color) && king.isChecked == true )
//            return "CheckMate";

    return bool;
}

function movePawn(square,moveFile, moveRank) {

//    if(king.isAttacked())
        //return false;

    if(!checkSquares(square,moveFile,moveRank))
        //return false;

    // if(king.isChecked)
        //return false;

    if (square.getPiece().isFirstMove()
        && ( Math.abs(moveRank - square.rank()) == 2
             && moveFile - square.file() == 0) ) {

        Board.move(square.getPiece(),moveFile,moveRank);
        return true;
    }

    if (Math.abs(moveRank-square.rank()) == 1
        && moveFile - square.file() == 0) {
        Board.move(square.getPiece(),moveFile,moveRank);
        return true;
    }

    return false;
}

function moveKnight(square,moveFile, moveRank){

    // if(king.isAttacked())
        // return false;

    if(!checkSquares(square,moveFile,moveRank))
        return false;

    // if(king.isChecked)
        // return false;

    if (Math.abs(moveFile)  == 1 && Math.abs(moveRank) == 2 ||
        Math.abs(moveFile)  == 2 && Math.abs(moveRank) == 1){
       Board.move(square.getPiece(), moveFile,moveRank);
       return true;}
    return false;
}

function moveBishop(square,moveFile, moveRank){

    // if(king.isAttacked())
        // return false;

    if(!checkSquares(square,moveFile,moveRank))
        return false;

    // if(king.isChecked)
        // return false;

    if(Math.abs(moveFile-square.getFile())
        == Math.abs(moveRank-square.getRank())){
        Board.move(square.getPiece(), moveFile,moveRank);
        return true; }
    return false;
}

function moveRook(square,moveFile, moveRank){

    // if(king.isAttacked())
        // return false;

    if(!checkSquares(square,moveFile,moveRank))
        return false;

    // if(king.isChecked)
        // return false;

    if(moveFile == square.getFile || moveRank == square.getRank)
    {
        Board.move(square.getPiece(), moveFile,moveRank);

        square.getPiece().moved();
        return true;}

    return false;
}

function moveQueen(square, moveFile, moveRank){

    // if(king.isAttacked())
        // return false;

    if(!checkSquares(square,moveFile,moveRank))
        return false;

    // if(king.isChecked)
        // return false;

    if((moveFile == square.getFile || moveRank == square.getRank)
        && (Math.abs(moveFile-square.getFile())
        == Math.abs(moveRank-square.getRank()))){

        Board.move(square.getPiece(), moveFile,moveRank);
        return true; }
    return false;

}

function moveKing(square,moveFile,moveRank){


    if(!checkSquares(square,moveFile,moveRank))
        return false;


    if(square.getPiece().getColor == 1)
    {
        if(moveFile == 'g' && moveRank == '1' && !square.getPiece.isMoved()
            && !Board.getPiece('h',1).isMoved()
            &&  checkSquares(Board.getPiece('g',1),'e',1)
            && !Board.getPiece('g',1).isAttacked()
            && !Board.getPiece('f',1).isAttacked()){

            Board.move('K', 'g', 1 );
            Board.move('R', 'f', 1 );
            square.getPiece().moved();
            Board.getPiece('f',1).moved();
            return true; }

        else
        if(moveFile == 'c' && moveRank == '1' && !square.getPiece.isMove()
            && !Board.getPiece('a',1).isMoved()
            &&  checkSquares(Board.getPiece('a',1),'e',1)
            && !Board.getPiece('b',1).isAttacked()
            && !Board.getPiece('c',1).isAttacked()
            && !Board.getPiece('d',1).isAttacked()){

            Board.move('K','c' ,1);
            Board.move('R','d', 1);
            square.getPiece().moved();
            Board.getPiece('d',1).moved();
            return true; }

    }
    else
    {
        if(moveFile == 'g' && moveRank == '8' && !square.getPiece().isMoved()
            && !Board.getPiece('h',8).isMoved()
            &&  checkSquares(Board.getPiece('g',8),'e',8)
            && !Board.getPiece('g',8).isAttacked()
            && !Board.getPiece('f',8).isAttacked()){

            Board.move('K', 'g', 8 );
            Board.move('R', 'f', 8 );
            square.getPiece().moved();
            Board.getPiece('h',8).moved();
            return true; }

        else
        if(moveFile == 'c' && moveRank == '8' && !square.getPiece().isMove()
            && !Board.getPiece('a',8).isMoved()
            &&  checkSquares(Board.getPiece('a',8),'e',8)
            && !Board.getPiece('b',8).isAttacked()
            && !Board.getPiece('c',8).isAttacked()
            && !Board.getPiece('d',8).isAttacked()){

            Board.move('K','c' ,8);
            Board.move('R','d', 8);
            square.getPiece().moved();
            Board.getPiece('d',8).moved();
            return true; }

    }



    if(Math.abs(moveFile - square.getFile()) <= 1
                && Math.abs(moveRank - square.getRank()) <=1 ){
        Board.move(square.getPiece(),moveFile,moveRank);
        square.getPiece().moved();
        king.isUnchecked();
        return true; }
    return false;
}

module.exports = isLegal;