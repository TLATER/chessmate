var currentSquare;
var nextSquare;

function mover() {
    var move;
}

// function to store in var move if the move can be done(true) or not(false)
mover.prototype.checkMove = function(req_currentSquare, req_nextSquare) {
    currentSquare = req_currentSquare;
    nextSquare = req_nextSquare;
    
    var piece = currentSquare.getPiece(;)

    // check the type of the piece in the square and go check for move for every single piece
    switch(piece)
    {
        case 'K' :{ move = moveKing();
                   break; }
        case 'Q' :{ move = moveBishop() && moveRock();
                   break; }
        case 'B' :{ move = moveBishop();
                   break; }
        case 'R' :{ move = moveRock();
                   break; }
        case 'S' :{ move = moveKnight();
                   break; }
        case 'P' :{ move = movePawn();
                   break; }
    }
    
    return move;
}

// checking if king can move
function moveKing() {
    moveFile = nextSquare.getFile();
    moveRank = nextSquare.getRank();
    var Piece = currentSquare.getPiece();

//checking if the kins is going on the next square after the currentsquare
// all 8 possibilities are checked
    if(nextSquare.getFile() - currentSquare.getFile() > 1 ||
       nextSquare.getFile() - currentSquare.getFile() <-1 ||
       nextSquare.getRank() - currentSquare.getRank() < 1 ||
       nextSquare.getRank() - currentSquare.getRank() >-1 )
       return false();

    if( nextSquare.getPiece() != 0 )
    {
       var Piece2 = nextSquare.getPiece();
       if( Piece2.getColour == Piece.getColour() && Piece2.getName() == 'K' )
           return false;
    }
    return true;
}

//movement of bishop
function moveBishop() {
    if(Math.abs(currentSquare.getFile() - currentSquare.getRank()) ==  Math.abs(nextSquare.getFile() - nextSquare.getRank))
        return true;
    return false;
}

//movement of Rock
function moveRock() {
    if(currentSquare.getFile() == nextSquare.getFile || currentSquare.getRank() == nextSquare.getRank())
        return true;
    return false;
}

//movement of knight, checking all possibilites of moving knight(8 of them)
//dont know a simplier method, just put in general the coordinates of the 'correct' square
function moveKnight() {

    //checking if sq is correct to move
    if( (nextSquare.getFile() == currentSquare.getFile() - 1 && nextSquare.getRank() == currentSquare.getRank() - 2) ||
        (nextSquare.getFile() == currentSquare.getFile() - 1 && nextSquare.getRank() == currentSquare.getRank() + 2) ||
        (nextSquare.getFile() == currentSquare.getFile() + 1 && nextSquare.getRank() == currentSquare.getRank() - 2) ||
        (nextSquare.getFile() == currentSquare.getFile() + 1 && nextSquare.getRank() == currentSquare.getRank() + 2) ||
        (nextSquare.getFile() == currentSquare.getFile() - 2 && nextSquare.getRank() == currentSquare.getRank() - 1) ||
        (nextSquare.getFile() == currentSquare.getFile() - 2 && nextSquare.getRank() == currentSquare.getRank() + 1) ||
        (nextSquare.getFile() == currentSquare.getFile() + 2 && nextSquare.getRank() == currentSquare.getRank() - 1) ||
        (nextSquare.getFile() == currentSquare.getFile() + 2 && nextSquare.getRank() == currentSquare.getRank() + 1) )

        return true;


    return false;
}

//pawn movement
function movePawn() {

    //checking if next sq is a correct move
    if(currentSquare.getFile() == nextSquare.getFile() && currentSquare.getRank() == nextSquare().getRank -1 )
        return true;

    //checking en passant
     

    //capture

}

module.exports = mover;