// So how do I make this an abstract? There is no such thing in javascript...
// My solution: I don't! Instead I call a piece constructor from each individual
//                       piece constructor and fill a bunch of private variables
//                       I just tell everyone not to use this class directly...
//                       Otherwise all variables will just return undefined.

var whitePieces = [];
var blackPieces = [];

function Piece() {
    // Initialize the name, but don't assign a name. The child will do that.
    this.name;
    // Initialize the position, but don't assign any. The child will do that.
    this.file;
    this.rank;

    // Initialize the color (white 1, black 0)
    this.color;

    // Initialize pin, the board will set this so this is false.
    this.pin = false;

    // Don't push empty pieces (color -1)
    if (this.color === 1)
        whitePieces.push(this);

    else if (this.color === 0)
        blackPieces.push(this);
}

// We want a few public methods to access these
Piece.prototype.toString = function() {
    return this.name;
};

Piece.prototype.getPin = function() {
    return this.pin;
};

Piece.prototype.getFile = function() {
    return this.file;
};

Piece.prototype.getRank = function() {
    return this.rank;
};

Piece.prototype.getColor = function() {
    return this.color;
};

Piece.prototype.getColorString = function() {
    if (this.color === 1)
        return 'W';
    else
        return '';
    // Don't return black due to legacy
};

module.exports = Piece;
exports.getWhite = function() {
    return whitePieces;
};

exports.getBlack = function() {
    return blackPieces;
};

exports.slain = function(piece) {
    for (var i = 0; i < whitePieces.length; i++) {
        if (whitePieces[i] === piece) {
            whitePieces.splice(i, 1);
        }

        if (blackPieces[i] === piece) {
            blackPieces.splice(i, 1);
        }
    }
};