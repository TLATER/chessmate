// So how do I make this an abstract? There is no such thing in javascript...
// My solution: I don't! Instead I call a piece constructor from each individual
//                       piece constructor and fill a bunch of private variables
//                       I just tell everyone not to use this class directly...
//                       Otherwise all variables will just return undefined.

function Piece() {
    // Initialize the name, but don't assign a name. The child will do that.
    this.name;
    // Initialize the position, but don't assign any. The child will do that.
    this.file;
    this.rank;

    // Initialize the color (white 1, black 0)
    this.color;

    // Initialize pin, the board will set this so this is false.
    this.pin = false;
}

// We want a few public methods to access these
Piece.prototype.toString = function() {
    return this.name;
};

Piece.prototype.getPin = function() {
    return this.pin;
};

Piece.prototype.getFile = function() {
    return this.file;
};

Piece.prototype.getRank = function() {
    return this.rank;
};

Piece.prototype.getColor = function() {
    return this.color;
};

module.exports = Piece;