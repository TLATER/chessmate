// So how do I make this an abstract? There is no such thing in javascript...
// My solution: I don't! Instead I call a piece constructor from each individual
//                       piece constructor and fill a bunch of private variables
//                       I just tell everyone not to use this class directly...
//                       Otherwise all variables will just return undefined.

function Piece() {
    // We need an id...
    this.id;
    // Initialize the name, but don't assign a name. The child will do that.
    this.name;

    // Initialize the color (white 1, black 0)
    this.color;

    // Initialize pin, the board will set this so this is false.
    this.pin = false;

    // Unfortunately, we also need to set the square of the piece
    this.hack;

    // Initialize attacked, a normal chess board won't have this set to true
    this.attacked = false;
}

// We want a few public methods to access these
Piece.prototype.toString = function() {
    return this.name;
};

Piece.prototype.getPin = function() {
    return this.pin;
};

Piece.prototype.getColor = function() {
    return this.color;
};

Piece.prototype.isAttacked = function() {
    return this.attacked;
};

Piece.prototype.setAttacked = function(newAttackState) {
    this.attacked = newAttackState;
};

Piece.prototype.getColorString = function() {
    if (this.color === 1)
        return 'W';
    else
        return '';
    // Don't return black due to legacy
};

Piece.prototype.equals = function(other) {
    return this.id === other.id;
};

Piece.prototype.square = function() {
    return this.hack;
};

Piece.prototype.setSquare = function(newSquare) {
    this.hack = newSquare;
};
module.exports = Piece;