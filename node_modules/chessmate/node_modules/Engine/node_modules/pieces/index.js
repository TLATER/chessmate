/**
 *
 * @public: toString: assign piece name to string.
 *          getPin: check whether piece can move.
 *          getFile: get column of piece.
 *          getRank: get row of piece.
 *          getColor: get color of piece.
 * @args: color: color of piece. empty.js color can be -1 for no color.
 *
 */

// Centralize all pieces in this file
var rook = require('rook');
var queen = require('queen');
var pawn = require('pawn');
var knight = require('knight');
var king = require('king');
var bishop = require('bishop');
var empty = require('empty');

var pieceMaker = function() {
    this.white = [];
    this.black = [];
    this.allColors = [];

    this.kingBlack;
    this.kingWhite;

    this.piecesMade = 0;

    this.addPiece = function(piece) {
        if (piece.getColor() === 0)
            this.black.push(piece);
        else
            this.white.push(piece);
        this.allColors.push(piece);
    };

    this.setKing = function(piece) {
        if (piece.getColor() === 0)
            this.kingBlack = piece;
        else
            this.kingWhite = piece;
    };
};

pieceMaker.prototype.rook = function(color) {
    var piece = new rook(color, this.piecesMade);
    this.piecesMade++;
    this.addPiece(piece);

    return piece;
};
pieceMaker.prototype.queen = function(color) {
    var piece = new queen(color, this.piecesMade);
    this.piecesMade++;
    this.addPiece(piece);

    return piece;
};
pieceMaker.prototype.pawn = function(color) {
    var piece = new pawn(color, this.piecesMade);
    this.piecesMade++;
    this.addPiece(piece);

    return piece;
};
pieceMaker.prototype.knight = function(color) {
    var piece = new knight(color, this.piecesMade);
    this.piecesMade++;
    this.addPiece(piece);

    return piece;
};
pieceMaker.prototype.king = function(color) {
    var piece = new king(color, this.piecesMade);
    this.piecesMade++;
    this.addPiece(piece);
    this.setKing(piece);

    return piece;
};
pieceMaker.prototype.bishop = function(color) {
    var piece = new bishop(color, this.piecesMade);
    this.piecesMade++;
    this.addPiece(piece);

    return piece;
};
pieceMaker.prototype.empty = function(color) {
    this.piecesMade++;
    return new empty(color, this.piecesMade);
};


pieceMaker.prototype.getKingBlack = function() {
    return this.kingBlack;
};
pieceMaker.prototype.getKingWhite = function() {
    return this.kingWhite;
};
pieceMaker.prototype.getAllWhite = function() {
    return this.white;
};
pieceMaker.prototype.getAllBlack = function() {
    return this.black;
};
pieceMaker.prototype.getAllPieces = function() {
    return this.allColors;
};
pieceMaker.prototype.removePiece = function(piece) {
    this.white = this.white.filter(function(element) {
        return element.equals(piece);
    });
    this.black = this.black.filter(function(element) {
        return element.equals(piece);
    });
    this.allColors = this.allColors.filter(function(element) {
        return element.equals(piece);
    });
};

module.exports = pieceMaker;