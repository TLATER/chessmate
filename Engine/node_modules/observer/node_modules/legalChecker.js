var Board = require('../../board');
var king = require('../../pieces')

function isLegal(piece, moveFile, moveRank) {
    // name of the piece
    var name = piece.toString();

    //the boolean for moving(true/false)
    var bool;

    //go method given by the piece we have
    switch(name) {
        case 'P':  bool =  movePawn(piece,moveFile, moveRank);
                   break;
        case 'S':  bool = moveKnight(piece,moveFile, moveRank);
                   break;
        case 'B':  bool = moveBishop(moveFile,moveRank);
                   break;
        case 'R':  bool = moveRook(piece,moveFile,moveRank);
                   break;
        case 'Q':  bool = moveBishop(piece,moveFile,moveRank) &&
                          moveRook(piece,moveFile,moveRank);
                   break;
        case 'K':  bool = moveKing(piece,moveFile.moveRank);
                   break;
    }
    
    if(bool == true && king.isAttacked)
    {
        king.isChecked();
    }
    

    return bool;
}

function movePawn(piece,moveFile, moveRank) {
    
    if(king.isChecked)
        return false;
    
    if (piece.isFirstMove() && (moveRank == 2 && moveFile == 0) ) {
        Board.move(piece,moveFile,moveRank);
        return true;
    }

    if (moveRank == 1 && moveFile == 0) {
        Board.move(piece,moveFile,moveRank);
        return true;
    }

    return false;
}

function moveKnight(piece,moveFile, moveRank){
    
    if(king.isChecked)
        return false;
    
    if (Math.abs(moveFile)  == 1 && Math.abs(moveRank) == 2 ||
        Math.abs(moveFile)  == 2 && Math.abs(moveRank) == 1){
       Board.move(piece, moveFile,moveRank);
       return true;}
    return false;
}

function moveBishop(piece,moveFile, moveRank){
    
    if(king.isChecked)
        return false;
    
    if(Math.abs(moveFile) == Math.abs(moveRank)){
        Board.move(piece, moveFile,moveRank);
        return true; }
    return false;
}

function moveRook(piece,moveFile, moveRank){
    
    if(king.isChecked)
        return false;
    
    if(moveFile == 0 || moveRank == 0)
    {   
        Board.move(piece, moveFile,moveRank);
        piece.moved();
        return true;}
    return false;
}

function moveKing(piece,moveFile,moveRank){
    
    // check if the square is attacked
    // if so the king dont move
    if(Board.getPiece(moveFile,moveRank).isAttacked())
        return false;
    
    // check the 
    if(piece.getColor == 1)
    {
        if(moveFile == 'g' && moveRank == '1' && piece.isMoved() 
            &&  Board.getPiece('h',1).isMoved()  /*check teh square bwtween roog and king*/
            && !Board.getPiece('g',1).isAttacked() 
            && !Board.getPiece('f',1).isAttacked()){
            
            Board.move('K', 'g', 1 );
            Board.move('R', 'f', 1 );
            piece.moved();
            Board.getPiece('f',1).moved();
            return true; }
            
        else 
        if(moveFile == 'c' && moveRank == '1' && piece.isMove()
            &&  Board.getPiece('a',1).isMoved()  /*check the free square*/
            && !Board.getPiece('b',1).isAttacked() 
            && !Board.getPiece('c',1).isAttacked()
            && !Board.getPiece('d',1).isAttacked()){
            
            Board.move('K','c' ,1);
            Board.move('R','d', 1);
            piece.moved();
            Board.getPiece('d',1).moved();
            return true; }
            
    }
    else
    {
        if(moveFile == 'g' && moveRank == '8' && piece.isMoved() 
            && !Board.getPiece('h',8).isMoved()  /*check teh square bwtween roog and king*/
            && !Board.getPiece('g',8).isAttacked() 
            && !Board.getPiece('f',8).isAttacked()){
            
            Board.move('K', 'g', 8 );
            Board.move('R', 'f', 8 );
            piece.moved();
            Board.getPiece('h',8).moved();
            return true; }
            
        else 
        if(moveFile == 'c' && moveRank == '8' && piece.isMove()
            &&  Board.getPiece('a',8).isMoved()  /*check the free square*/
            && !Board.getPiece('b',8).isAttacked() 
            && !Board.getPiece('c',8).isAttacked()
            && !Board.getPiece('d',8).isAttacked()){
            
            Board.move('K','c' ,8);
            Board.move('R','d', 8);
            piece.moved();
            Board.getPiece('d',8).moved();
            return true; }
        
    }
    
    
    
    if(Math.abs(moveFile) <= 1 && Math.abs(moveRank) <=1 ){
        Board.move(piece,moveFile,moveRank);
        piece.moved();
        king.isUnchecked();
        return true; }
    return false;
}

module.exports = isLegal;